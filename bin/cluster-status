#!/usr/bin/env bash
# Summary: show status of current cluster

csource="${BASH_SOURCE[0]}"
while [ -h "$csource" ] ; do csource="$(readlink "$csource")"; done
root="$( cd -P "$( dirname "$csource" )/" && pwd )" || exit 1

. "${root}/common.bash" || exit 1

for arg in "${@}"; do
    shift
    case "${arg}" in
        "--servers") set -- "${@}" "-s" ;;
        "--clients") set -- "${@}" "-c" ;;
        "--consuls") set -- "${@}" "-o" ;;
        "--vaults") set -- "${@}" "-V" ;;
        "--ceph") set -- "${@}" "-C" ;;
        "--help") set -- "${@}" "-h" ;;
        *) set -- "${@}" "${arg}" ;;
    esac
done

while getopts "hcsoVC" opt; do
    case "${opt}" in
        "C") ceph="1" ;;
        "c") clients="1" ;;
        "s") servers="1" ;;
        "o") consuls="1" ;;
        "V") vaults="1" ;;
        "h") help="1" ;;
        *) help="1" ;;
    esac
done
shift $((OPTIND-1))

if [ -n "${help}" ]; then
    printf "Usage: %s [options]\n" "${SCRIPT_NAME}"
    printf "\t--servers, -s\tCluster servers status\n"
    printf "\t--clients, -c\tCluster clients status\n"
    printf "\t--consuls, -o\tCluster consuls status\n"
    printf "\t--vaults, -V\tCluster vaults status\n"
    printf "\t--ceph, -C\tCeph status\n"
    exit 1
fi

cluster-must-exist

printf "Current Cluster Status (%b%s%b)\n\n" "${TEXT_YELLOW}" "${DIR_SHA}" "${TEXT_CLEAR}"

readarray -t ALL_INSTANCES < <(get-instances)
#export ALL_INSTANCES

function instances_summary() {
    local type="${1?Type of instance required}"
    local state instance
    local running="0"
    local stopped="0"
    local paused="0"
    local total="0"

    for instance in "${ALL_INSTANCES[@]}"; do
        if [[ "${instance}" != *"${type}"* ]]; then
            continue
        fi
        state="$(status-instance "${instance}")" || exit
        ((total++))
        case "${state}" in
            "running") ((running++)) ;;
            "stopped") ((stopped++)) ;;
            "frozen") ((paused++)) ;;
        esac
    done

    if [ "${total}" -lt "0" ]; then
        printf "%bnone%b\n" "${TEXT_RED}" "${TEXT_CLEAR}"
        return
    fi

    printf "%d instances " "${total}"
    if [ "${running}" -gt "0" ]; then
        printf "(%d %brunning%b) " "${running}" "${TEXT_GREEN}" "${TEXT_CLEAR}"
    fi
    if [ "${paused}" -gt "0" ]; then
        printf "(%d %bpaused%b) " "${paused}" "${TEXT_YELLOW}" "${TEXT_CLEAR}"
    fi
    if [ "${stopped}" -gt "0" ]; then
        printf "(%d %bstopped%b)" "${stopped}" "${TEXT_RED}" "${TEXT_CLEAR}"
    fi
}

function is-enabled() {
    local type="${1?Type of instance required}"
    local instance
    for instance in "${ALL_INSTANCES[@]}"; do
        if [[ "${instance}" == *"${type}"* ]]; then
            return 0
        fi
    done

    return 1
}

printf "» Nomad servers: %s \n" "$(instances_summary "server")" || exit
printf "» Nomad clients: %s \n" "$(instances_summary "client")" || exit

if is-cacher-enabled; then
    printf "%b•%b apt cacher: %benabled%b\n" "${TEXT_GREEN}" "${TEXT_CLEAR}" "${TEXT_GREEN}" "${TEXT_CLEAR}"
else
    printf "%b•%b apt cacher: %bdisabled%b\n" "${TEXT_RED}" "${TEXT_CLEAR}" "${TEXT_RED}" "${TEXT_CLEAR}"
fi

if is-cluster-network-enabled; then
    printf "%b•%b isolated network: %benabled%b (%s)\n" "${TEXT_GREEN}" "${TEXT_CLEAR}" "${TEXT_GREEN}" "${TEXT_CLEAR}" "${CLUSTER_NETWORK}"
else
    printf "%b•%b isolated network: %bdisabled%b\n" "${TEXT_RED}" "${TEXT_CLEAR}" "${TEXT_RED}" "${TEXT_CLEAR}"
fi

if is-nomad-acl-enabled; then
  printf "%b•%b nomad acls: %benabled%b %s\n" "${TEXT_GREEN}" "${TEXT_CLEAR}" "${TEXT_GREEN}" "${TEXT_CLEAR}"
else
    printf "%b•%b nomad acls: %bdisabled%b\n" "${TEXT_RED}" "${TEXT_CLEAR}" "${TEXT_RED}" "${TEXT_CLEAR}"
fi

if is-enabled "ceph"; then
    printf "%b•%b ceph: %benabled%b %s\n" "${TEXT_GREEN}" "${TEXT_CLEAR}" "${TEXT_GREEN}" "${TEXT_CLEAR}" "$(instances_summary "ceph")"
else
    printf "%b•%b ceph: %bdisabled%b\n" "${TEXT_RED}" "${TEXT_CLEAR}" "${TEXT_RED}" "${TEXT_CLEAR}"
fi

if is-enabled "consul"; then
    printf "%b•%b consul: %benabled%b %s\n" "${TEXT_GREEN}" "${TEXT_CLEAR}" "${TEXT_GREEN}" "${TEXT_CLEAR}" "$(instances_summary "consul")"
else
    printf "%b•%b consul: %bdisabled%b\n" "${TEXT_RED}" "${TEXT_CLEAR}" "${TEXT_RED}" "${TEXT_CLEAR}"
fi

if is-enabled "vault"; then
    printf "%b•%b vault: %benabled%b %s\n" "${TEXT_GREEN}" "${TEXT_CLEAR}" "${TEXT_GREEN}" "${TEXT_CLEAR}" "$(instances_summary "vault")"
else
    printf "%b•%b vault: %bdisabled%b\n" "${TEXT_RED}" "${TEXT_CLEAR}" "${TEXT_RED}" "${TEXT_CLEAR}"
fi

if [ -n "${servers}" ]; then
    printf "\n» Nomad server details: "
    if is-enabled "server" ; then
        printf "\n"
        for instance in "${ALL_INSTANCES[@]}"; do
            if [[ "${instance}" != *"server"* ]]; then
                continue
            fi
            printf " • %s - %s (%s)\n" "${instance}" "$(get-instance-display-status "${instance}")" "$(get-instance-address "${instance}")"
        done
    else
        printf "%bnone%b" "${TEXT_RED}" "${TEXT_CLEAR}"
    fi
fi

if [ -n "${clients}" ]; then
    printf "\n» Nomad client details: "
    if is-enabled "client" ; then
        printf "\n"
        for instance in "${ALL_INSTANCES[@]}"; do
            if [[ "${instance}" != *"client"* ]]; then
                continue
            fi
            if is-instance-container "${instance}"; then
                type="$(printf "%bcontainer%b" "${TEXT_LIGHT_BLUE}" "${TEXT_CLEAR}")"
            else
                type="$(printf "%bvm%b" "${TEXT_LIGHT_PURPLE}" "${TEXT_CLEAR}")"
            fi
            printf " • %s - %s (%s) (%b)\n" "${instance}" "$(get-instance-display-status "${instance}")" "$(get-instance-address "${instance}")" "${type}"
        done
    else
        printf "%bnone%b" "${TEXT_RED}" "${TEXT_CLEAR}"
    fi
fi

if [ -n "${consuls}" ]; then
    printf "\n» Consul server details: "
    if is-enabled "consul" ; then
        printf "\n"
        for instance in "${ALL_INSTANCES[@]}"; do
            if [[ "${instance}" != *"consul"* ]]; then
                continue
            fi
            printf " • %s - %s (%s)\n" "${instance}" "$(get-instance-display-status "${instance}")" "$(get-instance-address "${instance}")"
        done
    else
        printf "%bnone%b" "${TEXT_RED}" "${TEXT_CLEAR}"
    fi
fi

if [ -n "${vaults}" ]; then
    printf "\n» Vault server details: "
    if is-enabled "vault"; then
        printf "\n"
        for instance in "${ALL_INSTANCES[@]}"; do
            if [[ "${instance}" != *"vault"* ]]; then
                continue
            fi
            printf " • %s - %s (%s)\n" "${instance}" "$(get-instance-display-status "${instance}")" "$(get-instance-address "${instance}")"
        done
    else
        printf "%bnone%b" "${TEXT_RED}" "${TEXT_CLEAR}"
    fi
fi

if [ -n "${ceph}" ]; then
    printf "\n» Ceph details: "
    if is-enabled "ceph"; then
        printf "\n"
        printf " • %s - %s (%s)\n" "${instance}" "$(get-instance-display-status "ceph-admin")" "$(get-instance-address "ceph-admin")"
        for instance in "${ALL_INSTANCES[@]}"; do
            if [[ "${instance}" != *"ceph-host"* ]]; then
                continue
            fi
            printf " • %s - %s (%s)\n" "${instance}" "$(get-instance-display-status "${instance}")" "$(get-instance-address "${instance}")"
        done
    else
        printf "%bnone%b" "${TEXT_RED}" "${TEXT_CLEAR}"
    fi
fi
