#!/usr/bin/env bash
# Summary: stream logs from cluster instances

csource="${BASH_SOURCE[0]}"
while [ -h "$csource" ] ; do csource="$(readlink "$csource")"; done
root="$( cd -P "$( dirname "$csource" )/" && pwd )" || exit 1

. "${root}/common.bash" || exit 1

for arg in "$@"; do
    shift
    case "${arg}" in
        "--all") set -- "${@}" "-a" ;;
        "--servers") set -- "${@}" "-s" ;;
        "--clients") set -- "${@}" "-c" ;;
        "--consul-servers") set -- "${@}" "-C" ;;
        "--consul-clients") set -- "${@}" "-o" ;;
        "--vault") set -- "${@}" "-V" ;;
        "--help") set -- "${@}" "-h" ;;
        *) set -- "${@}" "${arg}" ;;
    esac
done

while getopts "ahcsCoV" opt; do
    case "${opt}" in
        "a")
            clients="1"
            servers="1"
            consuls="1"
            ;;
        "c") clients="1" ;;
        "s") servers="1" ;;
        "C") consuls="1" ;;
        "o") consul_clients="1" ;;
        "V") vaults="1" ;;
        "h") help="1" ;;
        *) help="1" ;;
    esac
done
shift $((OPTIND-1))

if [ -z "${vaults}" ] && [ -z "${consuls}" ] && [ -z "${consul_clients}" ] && [ -z "${clients}" ] && [ -z "${servers}" ] && [ "${#}" -lt "1" ]; then
    help="1"
fi

if [ -n "${help}" ]; then
    printf "Usage: %s [options] [INSTANCE [INSTANCE...]]\n" "${SCRIPT_NAME}"
    printf "\t--all, -a\t\tStream all logs\n"
    printf "\t--clients, -c\t\tStream all client logs\n"
    printf "\t--servers, -s\t\tStream all server logs\n"
    printf "\t--consul-servers, -C\tStream all consul server logs\n"
    printf "\t--consul-clients, -o\tStream all consul client logs\n"
    printf "\t--vault, -V\t\tStream all vault server logs\n"
    exit 1
fi

cluster-must-exist

declare -A streaming
declare -A streaming_consul_clients
run="1"

function cleanup() {
    info "Cleaning up log streaming processes..."
    unset run
    for key in "${!streaming[@]}"; do
        pid="${streaming[${key}]}"
        if kill -0 "${pid}" > /dev/null 2>&1; then
            pkill -TERM -P "${pid}" > /dev/null &
        fi
    done
    for key in "${!streaming_consul_clients[@]}"; do
        pid="${streaming_consul_clients[${key}]}"
        if kill -0 "${pid}" > /dev/null 2>&1; then
            pkill -TERM -P "${pid}" > /dev/null &
        fi
    done

    wait
}

trap cleanup EXIT

function start-log-streaming() {
    if [ -n "${servers}" ]; then
        readarray -t list < <(get-instances "server")
        for i in "${list[@]}"; do
            if [ -n "${streaming[${i}]}" ]; then
                continue
            fi
            stream-logs "${i}" &
            streaming["${i}"]="${!}"
        done
    fi

    if [ -n "${clients}" ]; then
        readarray -t list < <(get-instances "client")
        for i in "${list[@]}"; do
            if [ -n "${streaming[${i}]}" ]; then
                continue
            fi
            stream-logs "${i}" &
            streaming["${i}"]="${!}"
        done
    fi

    if [ -n "${consuls}" ]; then
        readarray -t list < <(get-instances "consul")
        for i in "${list[@]}"; do
            if [ -n "${streaming[${i}]}" ]; then
                continue
            fi
            stream-logs "${i}" &
            streaming["${i}"]="${!}"
        done
    fi

    if [ -n "${consul_clients}" ]; then
        instances=()
        readarray -t list < <(get-instances "server")
        instances+=("${list[@]}")
        readarray -t list < <(get-instances "client")
        instances+=("${list[@]}")
        readarray -t list < <(get-instances "vault")
        instances+=("${list[@]}")
        for i in "${instances[@]}"; do
            if [ -n "${streaming_consul_clients[${i}]}" ]; then
                continue
            fi
            stream-logs "${i}" "consul" &
            streaming_consul_clients["${i}"]="${!}"
        done
    fi

    if [ -n "${vaults}" ]; then
        instances=()
        readarray -t list < <(get-instances "vault")
        instances+=("${list[@]}")
        for i in "${instances[@]}"; do
            if [ -n "${streaming[${i}]}" ]; then
                continue
            fi
            stream-logs "${i}" &
            streaming["${i}"]="${!}"
        done
    fi
}

function prune-pids() {
    for key in "${!streaming[@]}"; do
        pid="${streaming[${key}]}"
        if ! kill -0 "${pid}" > /dev/null 2>&1; then
            wait "${pid}"
            unset streaming["${key}"]
        fi
    done
    for key in "${!streaming_consul_clients[@]}"; do
        pid="${streaming_consul_clients[${key}]}"
        if ! kill -0 "${pid}" > /dev/null 2>&1; then
            wait "${pid}"
            unset streaming_consul_clients["${key}"]
        fi
    done

    if [ "${#streaming[@]}" == "0" ] && [ "${#streaming_consul_clients[@]}" == "0" ]; then
        unset run
    fi
}

for i in "${@}"; do
    stream-logs "${i}" &
    streaming["${i}"]="${!}"
done

while [ -n "${run}" ]; do
    start-log-streaming
    prune-pids
    sleep 5
done
