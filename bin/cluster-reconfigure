#!/usr/bin/env bash
# Summary: reconfigure nomad on instance(s)

csource="${BASH_SOURCE[0]}"
while [ -h "$csource" ] ; do csource="$(readlink "$csource")"; done
root="$( cd -P "$( dirname "$csource" )/" && pwd )" || exit 1

. "${root}/common.bash"

for arg in "$@"; do
    shift
    case "${arg}" in
        "--servers") set -- "${@}" "-s" ;;
        "--clients") set -- "${@}" "-c" ;;
        "--restart") set -- "${@}" "-R" ;;
        "--help") set -- "${@}" "-h" ;;
        *) set -- "${@}" "${arg}" ;;
    esac
done

while getopts "hcsR" opt; do
    case "${opt}" in
        "c") clients="1" ;;
        "s") servers="1" ;;
        "R") restart="1" ;;
        "h") help="1" ;;
        *) help="1" ;;
    esac
done
shift $((OPTIND-1))

if [ "${#}" -lt "1" ] && [ -z "${servers}" ] && [ -z "${clients}" ]; then
    help="1"
fi

if [ -n "${help}" ]; then
    printf "Usage: %s [options] [INSTANCE [INSTANCE...]]\n" "${SCRIPT_NAME}"
    printf "\t--servers, -s\tReconfigure nomad server processes\n"
    printf "\t--clients, -c\tReconfigure nomad client processes\n"
    printf "\t--restart, -R\tRestart nomad processes after reconfigure\n"
    exit 1
fi

cluster-must-exist

pids=()
instances=()

info "Reconfiguring cluster instances..."

if [ -n "${servers}" ]; then
    readarray -t list < <(get-instances server)
    for n in "${list[@]}"; do
        instances+=("${n}")
        reconfigure-nomad "${n}" &
        pids+=("${!}")
    done
fi

if [ -n "${clients}" ]; then
    readarray -t list < <(get-instances client)
    for n in "${list[@]}"; do
        instances+=("${n}")
        reconfigure-nomad "${n}" &
        pids+=("${!}")
    done
fi

for n in "${@}"; do
    instances+=("${n}")
    reconfigure-nomad "${n}" &
    pids+=("${!}")
done

result=0
for pid in "${pids[@]}"; do
    if ! wait "${pid}"; then
        result=1
    fi
done

if [ "${result}" != "0" ]; then
    failure "Unexpected error encountered during service reconfigure(s)"
fi

if [ -n "${restart}" ]; then
    restart-nomad "${instances[@]}" || exit
fi
