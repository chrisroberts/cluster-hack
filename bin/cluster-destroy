#!/usr/bin/env bash
# Summary: destroy existing cluster

csource="${BASH_SOURCE[0]}"
while [ -h "$csource" ] ; do csource="$(readlink "$csource")"; done
root="$( cd -P "$( dirname "$csource" )/" && pwd )" || exit 1

. "${root}/common.bash" || exit 1

for arg in "${@}"; do
    shift
    case "${arg}" in
        "--cacher") set -- "${@}" "-C" ;;
        "--ceph") set -- "${@}" "-E" ;;
        "--help") set -- "${@}" "-h" ;;
        *) set -- "${@}" "${arg}" ;;
    esac
done

while getopts "hEC" opt; do
    case "${opt}" in
        "E") ceph="1" ;;
        "C") cacher="1" ;;
        "h") help="1" ;;
        *) help="1" ;;
    esac
done
shift $((OPTIND-1))

if [ -n "${help}" ]; then
    printf "Usage: %s [options ][INSTANCE_NAME [INSTANCE_NAME...]]\n" "${SCRIPT_NAME}"
    printf "\t--cacher, -C\tDestroy global apt cacher\n"
    printf "\t--ceph, -E\tDestroy Ceph cluster\n"
    exit 1
fi

if [ -n "${cacher}" ] && is-cacher-enabled; then
    debug "deleting apt cacher instance"
    delete-instance "${CLUSTER_CACHER_INSTANCE}"
fi

cluster-must-exist

if [ -n "${ceph}" ]; then
    debug "deleting ceph cluster"
    instance_list="$(get-instances)"
    readarray -t instances <<< "${instance_list}"
elif [ "${#}" -lt "1" ]; then
    debug "deleting full cluster"
    full_delete="1"
    instance_list="$(get-instances)"
    readarray -t instances <<< "${instance_list}"
fi
instances+=("${@}")

pids=()
for instance in "${instances[@]}"; do
    delete-instance "${instance}" &
    pids+=("${!}")
done

result=0
for pid in "${pids[@]}"; do
    if ! wait "${pid}"; then
        result=1
    fi
done

# Delete the data directory if it's around
if [ -n "${full_delete}" ]; then
    if [ -d "${CLUSTER_DATA_DIR}" ]; then
        debug "deleting local data directory"
        rm -rf "${CLUSTER_DATA_DIR}"
    fi

    if is-cluster-network-enabled; then
        if ! destroy-cluster-network; then
            result=1
        fi
    fi
fi

exit "${result}"
