#!/usr/bin/env bash
# Summary: create new cluster

# Defaults
help=""
servers="0"
clients="0"
memory="1GiB"
cpus="1"
image="ubuntu/noble"
consul="0"
vm=""
cacher=""

for arg in "${@}"; do
    shift
    case "${arg}" in
        "--servers") set -- "${@}" "-s" ;;
        "--clients") set -- "${@}" "-c" ;;
        "--memory") set -- "${@}" "-m" ;;
        "--cpus") set -- "${@}" "-C" ;;
        "--image") set -- "${@}" "-i" ;;
        "--consul") set -- "${@}" "-o" ;;
        "--vm") set -- "${@}" "-v" ;;
        "--cacher") set -- "${@}" "-A" ;;
        "--help") set -- "${@}" "-h" ;;
        *) set -- "${@}" "${arg}" ;;
    esac
done

while getopts "hc:s:m:C:i:o:vA" opt; do
    case "${opt}" in
        "c") clients="${OPTARG}" ;;
        "s") servers="${OPTARG}" ;;
        "C") cpus="${OPTARG}" ;;
        "m") memory="${OPTARG}" ;;
        "i") image="${OPTARG}" ;;
        "o") consul="${OPTARG}" ;;
        "v") vm="1" ;;
        "A") cacher="1" ;;
        "h") help="1" ;;
        *) help="1" ;;
    esac
done
shift $((OPTIND-1))

csource="${BASH_SOURCE[0]}"
while [ -h "$csource" ] ; do csource="$(readlink "$csource")"; done
root="$( cd -P "$( dirname "$csource" )/" && pwd )" || exit 1

. "${root}/common.bash" || exit

LAUNCH_ARGS=()
if [ -n "${vm}" ]; then
    LAUNCH_ARGS+=("--vm")
fi
LAUNCH_ARGS+=("--config" "limits.memory=${memory}" "--config" "limits.cpu=${cpus}" "--ephemeral" "--profile" "${PROFILE_NAME}" "images:${image}")

if [ -n "${help}" ]; then
    printf "Usage: %s [options] --servers n --clients n\n" "${SCRIPT_NAME}"
    printf "\t--clients NUM, -c NUM\tNumber of client instances (1 minimum)\n"
    printf "\t--servers NUM, -s NUM\tNumber of server instances (3 minimum)\n"
    printf "\t--cpus NUM, -C NUM\tNumber of CPUs to assign instance (default: 1)\n"
    printf "\t--memory MEM, -m MEM\tMaximum memory allocated (default: 1GiB)\n"
    printf "\t--image NAME, -i NAME\tImage for instances\n"
    printf "\t--consul NUM, -o NUM\tEnable consul with number of servers (3 minimum)\n"
    printf "\t--vm, -v\t\tUse virtual machine instances\n"
    printf "\t--cacher, -A\t\tEnable global apt cacher\n"
    exit 1
fi

if [ "${servers}" -gt "0" ] && [ "${servers}" -lt "3" ]; then
    failure "Minimum number of server instances is 3"
fi

if [ "${clients}" -lt "1" ]; then
    failure "Minimum number of client instances is 1"
fi

if [ "${consul}" -gt "0" ]; then
    consul_enabled="1"
fi

if [ -n "${consul_enabled}" ] && [ "${consul}" -lt "3" ]; then
    failure "Minimum number of consul server instances is 3"
fi

cluster-must-not-exist

if [ -n "${cacher}" ]; then
    launch-cluster-cacher-instance
fi

if [ -n "${consul_enabled}" ]; then
    info "Creating new consul cluster - %d servers..." "${consul}"
    # Create the seed instance
    create-cluster-instance "consul0" || exit
    consul-init || exit
    configure-consul-server "consul0" "${consul}" || exit

    # Now create the rest
    pids=()
    for ((idx=1; idx<"${consul}"; idx++)); do
        launch-consul-server-instance "consul${idx}" "${consul}" &
        pids+=("${!}")
    done
    result=""
    for pid in "${pids[@]}"; do
        if ! wait "${pid}"; then
            result="1"
        fi
    done
    if [ -n "${result}" ]; then
        failure "Error encountered launching consul instances"
    fi

    success "Consul cluster creation complete"
fi

info "Creating new nomad cluster - %d servers with %d clients" "${servers}" "${clients}"

info "Setting up nomad server instances..."
start_idx="0"

if [ -z "${consul_enabled}" ]; then
    # Setup the seed instance
    create-cluster-instance "server0" || exit
    configure-nomad-server "server0" "${servers}" || exit
    start-service "server0" "nomad" || exit

    start_idx="1"
fi

pids=()
for ((idx="${start_idx}"; idx<"${servers}"; idx++)); do
    launch-nomad-server-instance "server${idx}" "${servers}" &
    pids+=("${!}")
done
result=""
for pid in "${pids[@]}"; do
    if ! wait "${pid}"; then
        result="1"
    fi
done
if [ -n "${result}" ]; then
    failure "Error encountered while creating nomad server instances"
fi

success "Nomad server instances created"

info "Setting up nomad client instances..."

pids=()
for ((idx="0"; idx<"${clients}"; idx++)); do
    launch-nomad-client-instance "client${idx}" &
    pids+=("${!}")
done

result=""
for pid in "${pids[@]}"; do
    if ! wait "${pid}"; then
        result="1"
    fi
done

if [ -n "${result}" ]; then
    failure "Error encountered during nomad client setup"
fi

success "Nomad client instances created"

if [ -n "${consul_enabled}" ]; then
    success "Cluster creation complete - %s servers / %s clients (consul enabled)" "${servers}" "${clients}"
else
    success "Cluster creation complete - %s servers / %s clients" "${servers}" "${clients}"
fi

addr="$(get-instance-address "client0")"
info "Found client address for requests - %s" "${addr}"

printf " â€¢ Waiting for client HTTP to be available.."

while true; do
    if curl -f --head "http://${addr}:4646" > /dev/null 2>&1; then
        printf " ready!\n"
        break
    fi
    printf "."
    sleep 1
done

# If no .envrc file, just output and exit
if [ ! -f "./.envrc" ]; then
    printf "  export NOMAD_ADDR=\"http://%s:4646\"\n" "${addr}"
    exit
fi

# Grab the contents of the file
envrc="$(<./.envrc)"

# If the header isn't found, don't modify
if [[ "${envrc}" != "${ENVRC_HEADER}"* ]]; then
    printf "  export NOMAD_ADDR=\"http://%s:4646\"\n" "${addr}"
    exit
fi

info "Updating direnv with new nomad address..."

sed -i.bak "s/export NOMAD_ADDR=.*$/export NOMAD_ADDR=\"http:\/\/${addr}:4646\"/" ./.envrc ||
    failure "Unable to update direnv with new nomad address: http://%s:4646" "${addr}"

if [ -z "${consul_enabled}" ]; then
    if [[ "${envrc}" == *"CONSUL_HTTP_ADDR"* ]]; then
        sed -i.bak "s/export CONSUL_HTTP_ADDR=.*$/export CONSUL_HTTP_ADDR=\"${addr}:8500\"/" ./.envrc ||
            failure "Unable to update direnv with new consul address: %s:8500" "${addr}"
    else
        printf 'export CONSUL_HTTP_ADDR="%s:8500"' "${addr}" >> ./.envrc
    fi
else
    sed -i.bak "s/export CONSUL_HTTP_ADDR=.*$//" ./.envrc
fi
